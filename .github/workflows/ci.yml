name: Rust CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'

permissions:
  contents: read
  actions: write
  packages: write

env:
  NEW_RELIC_INSERT_KEY: ${{ secrets.NEW_RELIC_INSERT_KEY }}
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
  REPOSITORY: ${{ github.repository }}
  WORKFLOW: ${{ github.workflow }}
  JOB: ${{ github.job }}
  RUN_ID: ${{ github.run_id }}
  GITHUB_EVENT_PATH: ${{ github.event_path }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Build
        uses: ./.github/actions/time-and-report
        with:
          step: "build"
          command: "cargo build --verbose"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Run Tests
        uses: ./.github/actions/time-and-report
        with:
          step: "run_tests"
          command: "cargo test --verbose"

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Run Clippy
        uses: ./.github/actions/time-and-report
        with:
          step: "run_clippy"
          command: "cargo clippy --all-targets --all-features -- -D warnings"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Generate Documentation
        uses: ./.github/actions/time-and-report
        with:
          step: "generate_documentation"
          command: "cargo doc --no-deps --document-private-items"

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: target/doc

  docker:
    name: Build Multi-Platform Docker Image
    runs-on: ubuntu-latest
    needs: [build, test, clippy]
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for OIDC token generation for cosign
      attestations: write  # Required for attestations
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Install syft for SBOM generation
      - name: Install syft
        uses: anchore/sbom-action/download-syft@v0.17.10

      # Install cosign for signing
      - name: Install cosign
        uses: sigstore/cosign-installer@v3

      # Log in to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ./docker-cache
          key: ${{ runner.os }}-docker-cache-${{ hashFiles('docker-bake.hcl') }}

      - name: Build and Push Docker Image
        uses: ./.github/actions/time-and-report
        with:
          step: "build_and_push_docker_image"
          command: "docker buildx bake --push"

      # Generate SBOM from the built image
      - name: Generate SBOM
        uses: ./.github/actions/time-and-report
        with:
          step: "generate_sbom"
          command: "syft ghcr.io/markcoleman/tarnished-api:latest -o cyclonedx-json=tarnished-api-sbom.json -o spdx-json=tarnished-api-sbom.spdx.json"

      # Sign the SBOM with cosign
      - name: Sign SBOM
        uses: ./.github/actions/time-and-report
        with:
          step: "sign_sbom"
          command: "cosign sign-blob --yes tarnished-api-sbom.json --output-signature=tarnished-api-sbom.json.sig --output-certificate=tarnished-api-sbom.json.pem"

      # Attach SBOM to the Docker image
      - name: Attach SBOM to image
        uses: ./.github/actions/time-and-report
        with:
          step: "attach_sbom"
          command: "cosign attach sbom --sbom tarnished-api-sbom.json ghcr.io/markcoleman/tarnished-api:latest"

      # Sign the attached SBOM attestation
      - name: Sign SBOM attestation
        uses: ./.github/actions/time-and-report
        with:
          step: "sign_sbom_attestation"
          command: "cosign sign --yes ghcr.io/markcoleman/tarnished-api:latest-sbom.att"

      # Verify the SBOM signature (as a validation step)
      - name: Verify SBOM signature
        uses: ./.github/actions/time-and-report
        with:
          step: "verify_sbom_signature"
          command: "cosign verify-blob --signature tarnished-api-sbom.json.sig --certificate tarnished-api-sbom.json.pem --certificate-identity-regexp='https://github.com/markcoleman/tarnished-api/.*' --certificate-oidc-issuer=https://token.actions.githubusercontent.com tarnished-api-sbom.json"

      # Verify the SBOM attestation attached to the image
      - name: Verify SBOM attestation
        uses: ./.github/actions/time-and-report
        with:
          step: "verify_sbom_attestation"
          command: "cosign verify-attestation --type=sbom --certificate-identity-regexp='https://github.com/markcoleman/tarnished-api/.*' --certificate-oidc-issuer=https://token.actions.githubusercontent.com ghcr.io/markcoleman/tarnished-api:latest"

      # Upload SBOMs as artifacts for centralized access
      - name: Upload SBOM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sbom-artifacts
          path: |
            tarnished-api-sbom.json
            tarnished-api-sbom.spdx.json
            tarnished-api-sbom.json.sig
            tarnished-api-sbom.json.pem