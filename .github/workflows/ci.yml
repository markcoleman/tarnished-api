name: Rust CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'CODEOWNERS'

permissions:
  contents: read
  actions: write
  packages: write
  # Needed for SLSA provenance generation
  id-token: write

env:
  NEW_RELIC_INSERT_KEY: ${{ secrets.NEW_RELIC_INSERT_KEY }}
  NEW_RELIC_ACCOUNT_ID: ${{ secrets.NEW_RELIC_ACCOUNT_ID }}
  REPOSITORY: ${{ github.repository }}
  WORKFLOW: ${{ github.workflow }}
  JOB: ${{ github.job }}
  RUN_ID: ${{ github.run_id }}
  GITHUB_EVENT_PATH: ${{ github.event_path }}
  GITHUB_SHA: ${{ github.sha }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Build
        uses: ./.github/actions/time-and-report
        with:
          step: "build"
          command: "cargo build --verbose"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Run Tests
        uses: ./.github/actions/time-and-report
        with:
          step: "run_tests"
          command: "cargo test --verbose"

  clippy:
    name: Run Clippy
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Run Clippy
        uses: ./.github/actions/time-and-report
        with:
          step: "run_clippy"
          command: "cargo clippy --all-targets --all-features -- -D warnings"

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Generate Documentation
        uses: ./.github/actions/time-and-report
        with:
          step: "generate_documentation"
          command: "cargo doc --no-deps --document-private-items"

      - name: Upload Documentation Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docs
          path: target/doc

  docker:
    name: Build Multi-Platform Docker Image
    runs-on: ubuntu-latest
    needs: [build, test, clippy]
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      image: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Log in to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: ./docker-cache
          key: ${{ runner.os }}-docker-cache-${{ hashFiles('docker-bake.hcl') }}

      - name: Build and Push Docker Image
        id: build
        uses: ./.github/actions/time-and-report
        with:
          step: "build_and_push_docker_image"
          command: |
            docker buildx bake --push --metadata-file /tmp/metadata.json
            digest=$(jq -r '.["tarnished-api"]["containerimage.digest"]' /tmp/metadata.json)
            echo "digest=$digest" >> "$GITHUB_OUTPUT"
            echo "image=ghcr.io/markcoleman/tarnished-api:latest" >> "$GITHUB_OUTPUT"

  # Build binary for SLSA provenance generation
  build-binary:
    name: Build Binary for SLSA
    runs-on: ubuntu-latest
    needs: [build, test, clippy]
    outputs:
      binary-hash: ${{ steps.binary-hash.outputs.hash }}
      binary-name: ${{ steps.binary-hash.outputs.name }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Cargo build artifacts
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}

      - name: Set up Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build Release Binary
        run: cargo build --release

      - name: Generate binary hash
        id: binary-hash
        run: |
          BINARY_NAME="tarnished-api"
          BINARY_PATH="target/release/$BINARY_NAME"
          if [ -f "$BINARY_PATH" ]; then
            HASH=$(sha256sum "$BINARY_PATH" | cut -d' ' -f1)
            echo "hash=$HASH" >> "$GITHUB_OUTPUT"
            echo "name=$BINARY_NAME" >> "$GITHUB_OUTPUT"
            echo "Binary hash: $HASH"
          else
            echo "Binary not found at $BINARY_PATH"
            exit 1
          fi

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: tarnished-api-binary
          path: target/release/tarnished-api
          retention-days: 5

  # Generate SLSA provenance for binary
  binary-provenance:
    name: Generate Binary SLSA Provenance
    needs: [build-binary]
    permissions:
      actions: read
      id-token: write
      contents: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.9.0
    with:
      base64-subjects: "${{ needs.build-binary.outputs.binary-name }}:${{ needs.build-binary.outputs.binary-hash }}"
      upload-assets: true

  # Generate SLSA provenance for container
  container-provenance:
    name: Generate Container SLSA Provenance
    needs: [docker]
    permissions:
      actions: read
      id-token: write
      contents: write
      packages: write
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_container_slsa3.yml@v1.9.0
    with:
      image: ghcr.io/markcoleman/tarnished-api
      digest: ${{ needs.docker.outputs.digest }}
      registry-username: ${{ github.actor }}
    secrets:
      registry-password: ${{ secrets.GITHUB_TOKEN }}
